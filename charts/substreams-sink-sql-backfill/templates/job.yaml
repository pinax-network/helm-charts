{{- $totalBlocks := sub .Values.endBlock .Values.startBlock }}
{{- $currentBlock := .Values.startBlock }}
{{- $blockLeftover := mod $totalBlocks .Values.jobAmount }}
{{- $blockIncrement := div (sub $totalBlocks $blockLeftover) .Values.jobAmount }}
{{- $values := .Values }}

{{- range $i := until ($values.jobAmount | int) }}
{{- if ne $i 0 }}
{{ $currentBlock = add $currentBlock $blockIncrement }}
{{- end }}
{{- if eq $i (sub $values.jobAmount 1) }}
{{ $blockIncrement = add $blockIncrement $blockLeftover }}
{{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "substreams-sink-sql-backfill.fullname" $ }}-{{$i}}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "substreams-sink-sql-backfill.labels" $ | nindent 4 }}
spec:
  template:
    metadata:
      labels:
        {{- include "substreams-sink-sql-backfill.labels" $ | nindent 8 }}
    spec:
      containers:
      # Container to create cursor tables
      - name: {{ include "substreams-sink-sql-backfill.fullname" $ }}-create-tables
        image: curlimages/curl:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -e
          
          cat <<EOF > /tmp/create-tables.sql
          CREATE TABLE IF NOT EXISTS {{ $values.database }}.{{ $values.tablePrefix }}_{{ $currentBlock }}
          (
              id        String,
              cursor    String,
              block_num Int64,
              block_id  String
          )
          ENGINE = ReplacingMergeTree()
              PRIMARY KEY (id)
              ORDER BY (id);
          EOF

          curl -X POST "http://{{ $values.host }}:8123/?user=$(USERNAME)&password=$(PASSWORD)" --data-binary @/tmp/create-tables.sql 
          
          touch /tmp/create-tables
        env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ $values.clickhouseAuth.secretName }}
              key: {{ $values.clickhouseAuth.keyUsername }}
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $values.clickhouseAuth.secretName }}
              key: {{ $values.clickhouseAuth.keyPassword }}
        volumeMounts:
        - name: jobs-sync
          mountPath: /tmp

      # Container to backfill data
      - name: {{ include "substreams-sink-sql-backfill.fullname" $ }}-backfill
        image: "{{ $values.image.repository }}:{{ $values.image.tag }}"
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -e

          while [ ! -f /tmp/create-tables ]; do sleep 1; done;
          
          ./substreams-sink-sql run clickhouse://$(USERNAME):$(PASSWORD)@{{ $values.host }}:9000/{{ $values.database }} {{ $values.manifest }} {{ $currentBlock }}:{{ add $currentBlock $blockIncrement }}
          
          touch /tmp/run-backfill
        env:
        - name: SINK_SQL_RUN_CURSORS_TABLE
          value: {{ $values.tablePrefix }}_{{ $currentBlock }}
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ $values.clickhouseAuth.secretName }}
              key: {{ $values.clickhouseAuth.keyUsername }}
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $values.clickhouseAuth.secretName }}
              key: {{ $values.clickhouseAuth.keyPassword }}
        envFrom:
        - configMapRef:
            name: env-{{ $.Release.Name }}
        volumeMounts:
        - name: jobs-sync
          mountPath: /tmp
          
      # Container to drop cursor tables
      - name: {{ include "substreams-sink-sql-backfill.fullname" $ }}-drop-tables
        image: curlimages/curl:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -e

          while [ ! -f /tmp/run-backfill ]; do sleep 1; done;

          echo "DROP TABLE {{ $values.database }}.{{ $values.tablePrefix }}_{{ $currentBlock }}" > /tmp/drop-tables.sql

          curl -X POST "http://{{ $values.host }}:8123/?user=$(USERNAME)&password=$(PASSWORD)" --data-binary @/tmp/drop-tables.sql
        env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ $values.clickhouseAuth.secretName }}
              key: {{ $values.clickhouseAuth.keyUsername }}
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $values.clickhouseAuth.secretName }}
              key: {{ $values.clickhouseAuth.keyPassword }}
        volumeMounts:
        - name: jobs-sync
          mountPath: /tmp
      restartPolicy: OnFailure
      imagePullSecrets:
        - name: {{ $values.imagePullSecret }}
      volumes:
      - name: jobs-sync
        emptyDir: {}
{{- end }}